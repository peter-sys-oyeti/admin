{"version":3,"sources":["serviceWorker.js","Bootstrapper.js","stores/QuizzesStore.js","stores/QuestionsStore.js","stores/AnswersStore.js","stores/RootStore.js","api/InitApi.js","api/Quizzes.js","api/Questions.js","api/Answers.js","components/Quizzes/Quizzes.js","components/Questions/Answers.js","components/Questions/Questions.js","components/App.js","index.js"],"names":["Boolean","window","location","hostname","match","store","Quiz","types","model","id","string","name","QuizzesStore","quizzes","array","quiz","maybe","actions","self","addQuiz","push","selectedQuiz","Question","quizId","content","QuestionsStore","questions","question","addQuestion","selectedQuestion","Answer","questionId","type","AnswersStore","answers","addAnswer","answer","RootStore","quizzesStore","optional","questionsStore","answersStore","Parse","initialize","serverURL","this","parse","client","LiveQueryClient","applicationId","javascriptKey","masterKey","open","error","quizzesFunctions","Quizzes","InitApi","Object","extend","Query","limit","find","getQuezzes","then","forEach","get","query","subscribe","quizzesLiveQuery","on","questionsFunctions","Questions","getQuestions","questionsLiveQuery","answersFunctions","Answers","getAnswers","answersLiveQuery","inject","observer","props","useState","setQuiz","isDimmed","setDimmer","history","Fragment","Header","as","attached","Popup","trigger","Button","icon","label","basic","length","position","Dimmer","active","inverted","Loader","Form","Field","value","placeholder","onChange","e","target","field","Divider","onClick","newQuiz","save","result","err","console","log","Segment","Card","Group","itemsPerRow","map","key","raised","Content","extra","className","color","useEffect","Table","celled","Row","HeaderCell","Body","Cell","activeIndex","setActiveIndex","setQuestion","setAnswer","handleAnswerChange","handleClick","titleProps","index","itemID","clearing","newQuestion","Accordion","fluid","styled","Title","Icon","newAnswer","styles","root","display","minHeight","appContent","flex","flexDirection","mainContent","padding","background","App","state","activeItem","handleItemClick","setState","children","Menu","pointing","fixed","Item","size","Link","to","Container","style","marginTop","path","component","React","Component","compose","create","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.de65b386.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import InitApi from \"./api/InitApi\";\n\nimport { quizzesLiveQuery, getQuezzes } from \"./api/Quizzes\";\nimport { questionsLiveQuery, getQuestions } from \"./api/Questions\";\nimport { answersLiveQuery, getAnswers } from \"./api/Answers\";\nexport const bootStore = store => {\n    quizzesFunctions(store);\n    questionsFunctions(store);\n    answersFunctions(store);\n};\n\nconst quizzesFunctions = store => {\n    getQuezzes().then(quizzes => {\n        quizzes.forEach(quiz => {\n            store.quizzesStore.addQuiz({\n                id: quiz.id,\n                name: quiz.get(\"name\")\n            });\n        });\n    });\n\n    quizzesLiveQuery().on(\"create\", quiz => {\n        store.quizzesStore.addQuiz({\n            id: quiz.id,\n            name: quiz.get(\"name\")\n        });\n    });\n};\n\nconst questionsFunctions = store => {\n    getQuestions().then(questions => {\n        questions.forEach(question => {\n            store.questionsStore.addQuestion({\n                id: question.id,\n                quizId: question.get(\"quizId\"),\n                content: question.get(\"content\")\n            });\n        });\n    });\n\n    questionsLiveQuery().on(\"create\", question => {\n        store.questionsStore.addQuestion({\n            id: question.id,\n            quizId: question.get(\"quizId\"),\n            content: question.get(\"content\")\n        });\n    });\n};\n\nconst answersFunctions = store => {\n    getAnswers().then(answers => {\n        answers.forEach(answer => {\n            store.answersStore.addAnswer({\n                id: answer.id,\n                questionId: answer.get(\"questionId\"),\n                content: answer.get(\"content\"),\n                type: answer.get(\"type\")\n            });\n        });\n    });\n\n    answersLiveQuery().on(\"create\", answer => {\n        store.answersStore.addAnswer({\n            id: answer.id,\n            questionId: answer.get(\"questionId\"),\n            content: answer.get(\"content\"),\n            type: answer.get(\"type\")\n        });\n    });\n};\n","import { types } from \"mobx-state-tree\";\n\nexport const Quiz = types.model(\"Quiz\", {\n    id: types.string,\n    name: types.string\n});\n\nexport const QuizzesStore = types\n    .model(\"QuizzesStore\", {\n        quizzes: types.array(Quiz),\n        quiz: types.maybe(Quiz)\n    })\n    .actions(self => ({\n        addQuiz(quiz) {\n            self.quizzes.push(quiz);\n        },\n        selectedQuiz(quiz) {\n            self.quiz = quiz;\n        }\n    }));\n","import { types } from \"mobx-state-tree\";\n\nexport const Question = types.model(\"Question\", {\n    id: types.string,\n    quizId: types.string,\n    content: types.string\n});\n\nexport const QuestionsStore = types\n    .model(\"QuestionsStore\", {\n        questions: types.array(Question),\n        question: types.maybe(Question)\n    })\n    .actions(self => ({\n        addQuestion(question) {\n            self.questions.push(question);\n        },\n        selectedQuestion(question) {\n            self.question = question;\n        }\n    }));\n","import { types } from \"mobx-state-tree\";\n\nexport const Answer = types.model(\"Answer\", {\n    id: types.string,\n    questionId: types.string,\n    content: types.string,\n    type: types.string\n});\n\nexport const AnswersStore = types\n    .model(\"AnswersStore\", {\n        answers: types.array(Answer)\n    })\n    .actions(self => ({\n        addAnswer(answer) {\n            self.answers.push(answer);\n        }\n    }));\n","import { types } from \"mobx-state-tree\";\nimport { QuizzesStore } from \"./QuizzesStore\";\nimport { QuestionsStore } from \"./QuestionsStore\";\nimport { AnswersStore } from \"./AnswersStore\";\nexport const RootStore = types.model(\"RootStore\", {\n    quizzesStore: types.optional(QuizzesStore, {}),\n    questionsStore: types.optional(QuestionsStore, {}),\n    answersStore: types.optional(AnswersStore, {})\n});\n","import { Parse } from \"parse\";\n\nclass InitApi {\n  constructor() {\n    try {\n      Parse.initialize(\n        \"CVVTVt9Kt5vbiVtqguupCIgOc97VAM1Y3iaIlFGT\",\n        \"qCCOAKoyq3nPaU3EmM4twUD2tQIfTwIDjTmpoUyC\"\n      );\n      Parse.serverURL = \"https://quizzes.back4app.io/\";\n      this.parse = Parse;\n\n      this.client = new Parse.LiveQueryClient({\n        applicationId: \"CVVTVt9Kt5vbiVtqguupCIgOc97VAM1Y3iaIlFGT\",\n        serverURL: \"wss://quizzes.back4app.io/\",\n        javascriptKey: \"qCCOAKoyq3nPaU3EmM4twUD2tQIfTwIDjTmpoUyC\",\n        masterKey: \"Qj3AD76jTrNV6F8g7eJm7cMP5YHRl6GQ4YaaOujW\"\n      });\n      this.client.open();\n    } catch (error) {}\n  }\n}\nexport default new InitApi();\n","import InitApi from \"./InitApi\";\n\nexport const saveQuiz = newQuiz => {\n    const Quizzes = InitApi.parse.Object.extend(\"Quizzes\");\n    const quiz = new Quizzes();\n    return quiz.save(newQuiz);\n};\n\nexport const getQuezzes = () => {\n    const Quizzes = InitApi.parse.Object.extend(\"Quizzes\");\n    const quizzes = new InitApi.parse.Query(Quizzes);\n    return quizzes.limit(500).find();\n};\n\nexport const quizzesLiveQuery = () => {\n    let query = new InitApi.parse.Query(\"Quizzes\");\n    let subscription = InitApi.client.subscribe(query);\n    return subscription;\n};\n","import InitApi from \"./InitApi\";\n\nexport const saveQuestion = newQuestion => {\n    const Questions = InitApi.parse.Object.extend(\"Questions\");\n    const question = new Questions();\n    return question.save(newQuestion);\n};\n\nexport const getQuestions = () => {\n    const Questions = InitApi.parse.Object.extend(\"Questions\");\n    const questions = new InitApi.parse.Query(Questions);\n    return questions.limit(500).find();\n};\n\nexport const questionsLiveQuery = () => {\n    let query = new InitApi.parse.Query(\"Questions\");\n    let subscription = InitApi.client.subscribe(query);\n    return subscription;\n};\n","import InitApi from \"./InitApi\";\n\nexport const saveAnswer = newAnswer => {\n    const Answers = InitApi.parse.Object.extend(\"Answers\");\n    const answer = new Answers();\n    return answer.save(newAnswer);\n};\n\nexport const getAnswers = () => {\n    const Answers = InitApi.parse.Object.extend(\"Answers\");\n    const answers = new InitApi.parse.Query(Answers);\n    return answers.limit(500).find();\n};\n\nexport const answersLiveQuery = () => {\n    let query = new InitApi.parse.Query(\"Answers\");\n    let subscription = InitApi.client.subscribe(query);\n    return subscription;\n};\n","import React, { useState } from \"react\";\nimport {\n    Button,\n    Header,\n    Segment,\n    Popup,\n    Form,\n    Divider,\n    Card,\n    Dimmer,\n    Loader\n} from \"semantic-ui-react\";\nimport { observer, inject } from \"mobx-react\";\nimport { saveQuiz } from \"../../api/Quizzes\";\n\nconst Quizzes = inject(\"store\")(\n    observer(props => {\n        const [quiz, setQuiz] = useState({ name: \"\" });\n        const [isDimmed, setDimmer] = useState(false);\n        const { store, history } = props;\n\n        const handleChange = e => {\n            let value = e.target.value;\n            let field = e.target.id;\n            setQuiz(quiz => ({ ...quiz, [field]: value }));\n        };\n\n        const reset = () => {\n            setQuiz(quiz => ({ ...quiz, name: \"\" }));\n        };\n\n        const navigateToQuestions = selectedQuiz => {\n            // console.log(store.quizzesStore);\n\n            store.quizzesStore.selectedQuiz(selectedQuiz);\n            console.log(store.quizzesStore.quiz);\n        };\n\n        return (\n            <React.Fragment>\n                <Header as=\"h2\" attached=\"top\">\n                    <Popup\n                        trigger={\n                            <Button\n                                content=\"Quizzes\"\n                                icon=\"plus\"\n                                label={{\n                                    as: \"a\",\n                                    basic: true,\n                                    content: store.quizzesStore.quizzes.length\n                                }}\n                            />\n                        }\n                        position=\"bottom left\"\n                        on=\"click\"\n                    >\n                        <Dimmer active={isDimmed} inverted>\n                            <Loader inverted>Saving</Loader>\n                        </Dimmer>\n                        <Form>\n                            <Form.Field>\n                                <label>New Quiz</label>\n                                <input\n                                    value={quiz.name}\n                                    id=\"name\"\n                                    placeholder=\"New Quiz\"\n                                    onChange={handleChange}\n                                />\n                            </Form.Field>\n                            <Divider />\n                            <Button\n                                onClick={() => {\n                                    if (quiz.name == \"\") {\n                                    } else {\n                                        setDimmer(true);\n                                        saveQuiz(quiz).then(\n                                            result => {\n                                                setDimmer(false);\n                                                reset();\n                                            },\n                                            err => {\n                                                console.log(\"failed to save\");\n                                            }\n                                        );\n                                    }\n                                }}\n                            >\n                                Save\n                            </Button>\n                        </Form>\n                    </Popup>\n                </Header>\n                <Segment attached>\n                    <Card.Group itemsPerRow={3}>\n                        {store.quizzesStore.quizzes.map(quiz => (\n                            <Card key={quiz.id} raised>\n                                <Card.Content>\n                                    <Card.Header>{quiz.name}</Card.Header>\n                                </Card.Content>\n                                <Card.Content extra>\n                                    <div className=\"ui two buttons\">\n                                        <Button\n                                            basic\n                                            color=\"green\"\n                                            onClick={() => {\n                                                store.quizzesStore.selectedQuiz(\n                                                    {\n                                                        id: quiz.id,\n                                                        name: quiz.name\n                                                    }\n                                                );\n\n                                                history.push(\"/questions\");\n                                            }}\n                                        >\n                                            Add Question\n                                        </Button>\n                                    </div>\n                                </Card.Content>\n                            </Card>\n                        ))}\n                    </Card.Group>\n                </Segment>\n            </React.Fragment>\n        );\n    })\n);\n\nexport default Quizzes;\n","import React, { useState, useEffect } from \"react\";\nimport {\n    Button,\n    Header,\n    Segment,\n    Popup,\n    Form,\n    Divider,\n    Accordion,\n    Icon,\n    Table\n} from \"semantic-ui-react\";\nimport { observer, inject } from \"mobx-react\";\n\nconst Answers = inject(\"store\")(\n    observer(props => {\n        const { store } = props;\n\n        useEffect(() => {\n            try {\n            } catch (error) {}\n        }, []);\n        return (\n            <React.Fragment>\n                <Table celled>\n                    <Table.Header>\n                        <Table.Row>\n                            <Table.HeaderCell>Answer</Table.HeaderCell>\n                            <Table.HeaderCell>Type</Table.HeaderCell>\n                        </Table.Row>\n                    </Table.Header>\n                    <Table.Body>\n                        {store.answersStore.answers.map(answer => {\n                            try {\n                                if (\n                                    store.questionsStore.question.id ===\n                                    answer.questionId\n                                ) {\n                                    return (\n                                        <Table.Row key={answer.id}>\n                                            <Table.Cell>\n                                                {answer.content}\n                                            </Table.Cell>\n                                            <Table.Cell>\n                                                {answer.type}\n                                            </Table.Cell>\n                                        </Table.Row>\n                                    );\n                                }\n                            } catch (error) {}\n                        })}\n                    </Table.Body>\n                </Table>\n            </React.Fragment>\n        );\n    })\n);\n\nexport default Answers;\n","import React, { useState, useEffect } from \"react\";\nimport { observer, inject } from \"mobx-react\";\nimport {\n    Button,\n    Header,\n    Segment,\n    Accordion,\n    Icon,\n    Input,\n    Popup,\n    Dimmer,\n    Loader,\n    Form,\n    Divider\n} from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\nimport { saveQuestion } from \"../../api/Questions\";\nimport { saveAnswer } from \"../../api/Answers\";\nimport Answers from \"./Answers\";\nconst Questions = inject(\"store\")(\n    observer(props => {\n        const { store, history } = props;\n\n        const [activeIndex, setActiveIndex] = useState(-1);\n        const [isLoading, setIsLoading] = useState(false);\n        const [question, setQuestion] = useState({\n            quizId: store.quizzesStore.quiz.id,\n            content: \"\"\n        });\n\n        const [answer, setAnswer] = useState({\n            questionId: \"\",\n            content: \"\",\n            type: \"\"\n        });\n\n        const [isDimmed, setDimmer] = useState(false);\n\n        const handleChange = e => {\n            let value = e.target.value;\n            let field = e.target.id;\n            setQuestion(question => ({ ...question, [field]: value }));\n        };\n\n        const handleAnswerChange = e => {\n            let value = e.target.value;\n            let field = e.target.id;\n            setAnswer(answer => ({ ...answer, [field]: value }));\n        };\n\n        const resetQuestion = () => {\n            setQuestion(question => ({ ...question, content: \"\" }));\n        };\n\n        const resetAnswer = () => {\n            setAnswer(answer => ({ ...answer, content: \"\" }));\n        };\n\n        const handleClick = (e, titleProps) => {\n            const { index, itemID } = titleProps;\n            const newIndex = activeIndex === index ? -1 : index;\n            setActiveIndex(newIndex);\n        };\n\n        return (\n            <React.Fragment>\n                <Segment clearing attached=\"top\">\n                    <Header>\n                        <Popup\n                            trigger={\n                                <Button\n                                    content={\n                                        store.quizzesStore.quiz.name + \" Quiz\"\n                                    }\n                                    icon=\"plus\"\n                                    label={{\n                                        as: \"a\",\n                                        basic: true,\n                                        content:\n                                            store.questionsStore.questions\n                                                .length\n                                    }}\n                                />\n                            }\n                            position=\"bottom left\"\n                            on=\"click\"\n                        >\n                            <Dimmer active={isDimmed} inverted>\n                                <Loader inverted>Saving</Loader>\n                            </Dimmer>\n                            <Form>\n                                <Form.Field>\n                                    <label>New Question</label>\n                                    <input\n                                        value={question.content}\n                                        id=\"content\"\n                                        placeholder=\"New Question\"\n                                        onChange={handleChange}\n                                    />\n                                </Form.Field>\n                                <Divider />\n                                <Button\n                                    onClick={() => {\n                                        if (question.name === \"\") {\n                                        } else {\n                                            setDimmer(true);\n                                            saveQuestion(question).then(\n                                                result => {\n                                                    setDimmer(false);\n                                                    resetQuestion();\n                                                },\n                                                err => {\n                                                    console.log(\n                                                        \"failed to save\"\n                                                    );\n                                                }\n                                            );\n                                        }\n                                    }}\n                                >\n                                    Save\n                                </Button>\n                            </Form>\n                        </Popup>\n                    </Header>\n                </Segment>\n                <Segment attached>\n                    <Accordion fluid styled>\n                        {store.questionsStore.questions.map(\n                            (question, index) => {\n                                if (\n                                    question.quizId ===\n                                    store.quizzesStore.quiz.id\n                                ) {\n                                    return (\n                                        <React.Fragment key={question.id}>\n                                            <Accordion.Title\n                                                active={activeIndex === index}\n                                                itemID={question.id}\n                                                index={index}\n                                                onClick={handleClick}\n                                            >\n                                                <Icon\n                                                    name=\"dropdown\"\n                                                    onClick={() => {\n                                                        store.questionsStore.selectedQuestion(\n                                                            {\n                                                                id: question.id,\n                                                                quizId:\n                                                                    question.quizId,\n                                                                content:\n                                                                    question.content\n                                                            }\n                                                        );\n                                                    }}\n                                                />\n                                                <Popup\n                                                    trigger={\n                                                        <Button\n                                                            content={\n                                                                question.content\n                                                            }\n                                                            icon=\"question\"\n                                                            label={{\n                                                                as: \"a\",\n                                                                basic: true,\n                                                                content:\n                                                                    \"Add Answer\"\n                                                            }}\n                                                            onClick={() => {\n                                                                setAnswer(\n                                                                    answer => ({\n                                                                        ...answer,\n                                                                        questionId:\n                                                                            question.id\n                                                                    })\n                                                                );\n                                                                store.questionsStore.selectedQuestion(\n                                                                    {\n                                                                        id:\n                                                                            question.id,\n                                                                        quizId:\n                                                                            question.quizId,\n                                                                        content:\n                                                                            question.content\n                                                                    }\n                                                                );\n                                                            }}\n                                                        />\n                                                    }\n                                                    position=\"bottom left\"\n                                                    on=\"click\"\n                                                >\n                                                    <Dimmer\n                                                        active={isDimmed}\n                                                        inverted\n                                                    >\n                                                        <Loader inverted>\n                                                            Saving\n                                                        </Loader>\n                                                    </Dimmer>\n                                                    <Form>\n                                                        <Form.Field>\n                                                            <label>\n                                                                New Answer\n                                                            </label>\n                                                            <input\n                                                                value={\n                                                                    answer.content\n                                                                }\n                                                                id=\"content\"\n                                                                placeholder=\"New Answer\"\n                                                                onChange={\n                                                                    handleAnswerChange\n                                                                }\n                                                            />\n                                                        </Form.Field>\n                                                        <Form.Field>\n                                                            <label>\n                                                                Answer Type\n                                                            </label>\n                                                            <input\n                                                                value={\n                                                                    answer.type\n                                                                }\n                                                                id=\"type\"\n                                                                placeholder=\"Answer Type\"\n                                                                onChange={\n                                                                    handleAnswerChange\n                                                                }\n                                                            />\n                                                        </Form.Field>\n\n                                                        <Divider />\n                                                        <Button\n                                                            onClick={() => {\n                                                                if (\n                                                                    answer.content ===\n                                                                    \"\"\n                                                                ) {\n                                                                } else {\n                                                                    setDimmer(\n                                                                        true\n                                                                    );\n                                                                    saveAnswer(\n                                                                        answer\n                                                                    ).then(\n                                                                        result => {\n                                                                            setDimmer(\n                                                                                false\n                                                                            );\n                                                                            resetAnswer();\n                                                                        },\n                                                                        err => {\n                                                                            console.log(\n                                                                                \"failed to save\"\n                                                                            );\n                                                                        }\n                                                                    );\n                                                                }\n                                                            }}\n                                                        >\n                                                            Save\n                                                        </Button>\n                                                    </Form>\n                                                </Popup>\n                                            </Accordion.Title>\n                                            <Accordion.Content\n                                                active={activeIndex === index}\n                                            >\n                                                <Answers props={props} />\n                                            </Accordion.Content>\n                                        </React.Fragment>\n                                    );\n                                }\n                            }\n                        )}\n                    </Accordion>\n                </Segment>\n            </React.Fragment>\n        );\n    })\n);\n\nexport default Questions;\n","import React from \"react\";\nimport { Header, Menu, Container } from \"semantic-ui-react\";\nimport { inject, observer } from \"mobx-react\";\nimport { compose } from \"recompose\";\nimport { Route, Switch, Link } from \"react-router-dom\";\nimport Quizzes from \"./Quizzes/Quizzes\";\nimport Questions from \"./Questions/Questions\";\n\nconst styles = {\n    root: {\n        display: \"flex\",\n        minHeight: \"100vh\"\n    },\n    appContent: {\n        flex: 1,\n        display: \"flex\",\n        flexDirection: \"column\"\n    },\n    mainContent: {\n        flex: 1,\n        padding: \"48px 36px 0\",\n        background: \"#eaeff1\",\n        position: \"relative\"\n    }\n};\n\nclass App extends React.Component {\n    state = { activeItem: \"quizzes\" };\n    handleItemClick = (e, { name }) => {\n        this.setState({ activeItem: name });\n    };\n\n    render() {\n        const { children, store } = this.props;\n\n        return (\n            <div className={styles.root}>\n                <div className={styles.appContent}>\n                    <Menu pointing fixed=\"top\">\n                        <Menu.Item>\n                            <Header size=\"small\">Quizzes Admin</Header>\n                        </Menu.Item>\n                        <Menu.Item\n                            name=\"quizzes\"\n                            active={this.state.activeItem === \"quizzes\"}\n                            onClick={this.handleItemClick}\n                            as={Link}\n                            to=\"/quizzes\"\n                        />\n\n                        <Menu.Menu position=\"right\">\n                            <Menu.Item\n                                name=\"reports\"\n                                active={this.state.activeItem === \"reports\"}\n                                onClick={this.handleItemClick}\n                            />\n                        </Menu.Menu>\n                    </Menu>\n                    <main className={styles.mainContent}>\n                        <React.Fragment>\n                            <Container style={{ marginTop: \"5em\" }}>\n                                <Switch>\n                                    <Route\n                                        path=\"/quizzes\"\n                                        component={Quizzes}\n                                    />\n\n                                    <Route\n                                        path=\"/questions\"\n                                        component={Questions}\n                                    />\n                                </Switch>\n                            </Container>\n                        </React.Fragment>\n                    </main>\n                </div>\n            </div>\n        );\n    }\n}\nexport default compose(observer, inject(\"store\"))(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport {RootStore} from './stores/RootStore';\nimport {HashRouter} from 'react-router-dom';\nimport {Provider} from 'mobx-react';\nimport { bootStore } from \"./Bootstrapper\";\nimport App from \"./components/App\";\n\nimport 'semantic-ui-css/semantic.min.css';\n\nconst store = RootStore.create({});\nbootStore(store);\n\nReactDOM.render(\n  <Provider store={store}>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}